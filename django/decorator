class A(object):
    def foo(self, x):#常规的方法
        print("executing foo(%s,%s)" % (self, x))
        print('self:', self)
    @classmethod#类方法
    def class_foo(cls, x):
        print("executing class_foo(%s,%s)" % (cls, x))
        print('cls:', cls)
    @staticmethod#静态方法
    def static_foo(x):
        print("executing static_foo(%s)" % x)    
a = A()
a.foo()
A.class_foo()
a/A.static_foo()

#函数装饰器 函数定义的时候名称重绑定
def decorator(F):
    return F
@decorator
def func():# func = decorator(func)
    pass
---------------------------------------------------
#对简单函数装饰有效，对类方法函数不一定有效，使用嵌套的形式。
class decorator:
    def __init__(self, func):
        self.func = func
    def __call__(self, *args, **kwargs):
        #self.func(*args)
        pass

@decorator
def func(x, y):#func = decorator(func)，会产生一个装饰器类的实例
    pass       #func is passed to __init__


func(1, 2)#1,3传给了__call__的参数接收
----------------------------------------------------
def decorator(F):
    def wrapper(*args):
        pass
    return wrapper

@decorator
def func(x, y):
    pass

class C:
    @decorator
    def method(self, x, y):
        pass

# 类装饰器，不是拦截而是返回一个可调用对象，调用创建实例的时候才运行。
def decorator(cls):#每次调用都创建一个新的
    class Wrapper:
        def __init__(self, *args):
            self.wrapped = cls(*args)
        def __call__(self, *args):
            self.wrapped = self.C(*args)
            return self
        def __getattr__(self, item):
            return getattr(self.wrapped, item)

@decorator
class C:# C = decorator(C)
    pass

def decorator(cls):#支持多个包装的实例
    class Wrapper:
        def __init__(self, *args):
            self.wrapped = cls(*args)
    return Wrapper

#跟踪调用
应用与类方法的时候self是装饰器的一个实例
class tracer:
	def __init__(self, func):
		self.call = 0
		self.func = func#使用类实例属性保存状态
	def __call__(self, *args)：
		self.call  += 1
		self.func(*args，**kargs)

#状态信息保持选项
类实例属性
封闭作用域和全局作用域
calls = 0
def tracer(func):
	def wrapper(*args, **kwargs):
		global calls
		calls +=1
		return func(*args, **kwargs)
	return wrapper
封闭作用域和nonlocal
def tracer(func):
	calls = 0
	def wrapper(*args, **kwargs):
		nonlocal calls
		calls +=1
		return func(*args, **kwargs)
	return wrapper
函数属性
def tracer(func):
	def wrapper(*args, **kwargs):
		wrapper.calls+=1
		calls +=1
		return func(*args, **kwargs)
	wrapper.calls = 0
	return wrapper




















































