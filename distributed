节点:完成某项工作的进程或机器.
网络
存储
cap
一致性
  强一致性
    所有节点数据高度一致.
  弱一致性
    单调一致性,单调向最新数据靠近,不会回退.
    最终一致性,多次尝试,最终状态是一致的.(用业务可接受的方式,换取系统的地复杂度和可用性)
可用性
  保证系统的正常可运行性,发送请求,收到回复,不管成功还是失败.
分区容错性
  在系统某些节点或网络异常情况下,系统仍然可以继续服务.通常是由负载均衡和副本来支撑的.
扩展性


设计策略
 重试机制
  将请求包含在一个重试循环块中,可以防止网络暂时抖动.
 心跳机制
  以固定的频率向其他节点汇报当前节点状态的方式.
 副本
  是指对一份数据的多份冗余拷贝,在不同节点上持久化同一份数据,一个节点数据丢失,可以从副本上获取.
 中心化/无中心化
  中心化:存在一个中心节点负责数据和其他节点的管理工作.
  无中心化:如zookeeper,如果出现异常不会影响整体系统,但是协议比较复杂,节点之间同步信息.

设计实践
 如何多机均匀分发数据
  哈希取模
   通过hash函数将业务id或key取余,余数作为处理该数据的服务器索引编号处理,id或key的不均匀会导致
   出现倾斜,扩容的时候通过成倍数2的幂,之前的索引有一部分不会变.
  一致性哈希
   使用一个哈希函数计算数据或数据特征的哈希值,哈希函数输出值域为一个封闭的环.节点随机分布到这个环上
   每个节点负责处理从自己开始顺时针至下一个节点的全部哈希值域上的数据.
   可以任意动态添加删除节点,只会影响相邻的节点.为了尽可能均匀分布节点和数据,使用虚节点.
  数据范围划分
   业务数据id或key分布不均匀,可以按组划分.
  数据块划分
   数据按固定块大小进行划分.需要外界点存储映射关系.
 各节点如何配合管理对外服务
  paxos
   其中有三类角色
    proposer:
    acceptor:
    learner:
  lease
    授予一段时间内的承诺.




































