硬件抽象层,
	为客户机操作系统呈现和硬件相同或相近的硬件抽象层.
系统层,
	操作系统内核提供多个相互隔离的用户态实例.
函数库层,应用层.

通过虚拟化层(vmm)的模拟来提供独立的虚拟机执行环境

   虚拟机  
     |
虚拟硬件抽象层,
     |
  虚拟化层
(硬件抽象层)
    硬件
x86平台
	需要基于软件(bt)实现完全虚拟化.
	类虚拟化技术修改操作系统源码与vmm软件协同工作.
	vt,svm,硬件辅助的完全虚拟化.操作系统不需要做修改.
x86 内存架构
物理地址空间,由cpu实现的物理地址位数所决定.内存和其他硬件设备等可用资源分布在cpu的物理地址空间内.
线性地址空间,有cpu实现的线性地址位数所决定,为了让多个程序能够有效相互隔离和使用物理地址空间的资源.
地址
逻辑地址,程序直接使用的地址.比如指针.
线性地址,又称为虚拟地址,用于索引线性地址空间.
物理地址,是cpu提交到总线用于访问资源的最终地址.
分段,分页未启用:逻辑地址>线性地址=物理地址
分段,分页启用:逻辑地址>线性地址>物理地址
内存管理机制
分段机制
是内存管理机制,将内存划分成以起始地址,长度描述的块称为段.
分段机制:逻辑地址(包含段选择符),段选择起存器,段描述符(段的基地址,长度,各种属性)->如果合法将可根据段描述符将逻辑地址转换成线性地址,段描述符表.
段选择符.  索引(index),描述符表(t1),权限级别(rpl)  //6个段寄存器
段描述符. cpu将段描述符中32位的基地址和逻辑地址中32位偏移量相加得到对应的线性地址. //对程序不可见,段描述符寄存器.
段描述符表,
	gdt,系统中至少有一个,可以被所有进程访问.是内存中的一个数据结构,(基地址,长度)
	ldt,系统中可以有一个或多个可以被某个进程私有.是一个段,需要描述符(存放gdt)描述,
	
分页机制
是更加粒度化的内存管理机制,用页来管理线性地址空间和物理地址空间,
页表
线性地址对应的页帧号叫虚拟页帧号,物理地址对应的页帧号叫物理页帧号,
页表存储从虚拟页帧号到物理页帧号映射的数据结构.
目录(31-22)|表(21-12)|偏移(11-0)

页目录中存放页目录项(4B,包含页表的物理地址),cpu使用线性地址22-31位索引页目录.
页表项(4B)存放在页表中,
基地址+0-11位偏移量得到线性地址对应的物理地址。
地址对齐到页边界后的值为页帧号，是该地址所在页面的基地址。

页目录项和页表项中p字段
p=1：物理页面存在于物理内存中，cpu完成地址转换之后可以直接访问该页面。
p=0：页面不在物理内存中，cpu访问该页面时产生缺页错误，并交给操作系统的缺页错误处理程序处理。通常将存在于磁盘上的页面
调入物理内存。

进程运行前将其页目录的基地址存入cr3.页目录的基地址对齐到4k边界。

TLB
对最近用到的页面映射进行缓存。页面映射存在与tlb中时无需查找页表就能进行地址转换。
vfn>pfn的转换。
刷新tlb
1，刷新cr3，比如进程切换，是的老进程在tlb中的条目失效。
2，invlpg指令，对tlb中单独的页目录项目，页表项进行刷新。

基本寄存器组 7类
通用寄存器，8个32位，保存程序运行时的临时变量，栈指针等数据。
内存管理寄存器，包括段寄存器和描述符表寄存器。
。
。
控制寄存器，5个cr0-cr4，决定了cpu运行的模式和特征。

权限控制
段保护
	当前权限级别，cpl0-3 ring级别 cs寄存器0-1位
	描述符权限级别，dpl，段和门，<=dpl的代码可以访问该数据段
	要求权限级别，rpl，段寄存器0-1位，
页保护
	在页目录项页表项引入一个User/supervisor位，0时表示s，cpl 0.1.2,可以访问所有页面，
	1时表示u，cpl=3只能访问user页面。
中断与异常
中断架构
这里太难了。。。。。



进程
程序是一个静态的指令序列，进程则是一个容器，包括执行一个程序的特定实例时用到的各种资源。
资源包括私有的线性地址空间，可执行的程序（代码和数据），已经获得的其他资源，进程的权限，进程的描述符。
上下文
上下文切换，相关寄存器的值切换
1用户态到内核态的切换2.进程切换例如把cr3换成新进程页目录的地址，eip指向新进程的第一条指令。
3.到中断上下文的切换

进程上下文-中断上下文（处理中断）-进程上下文（中断执行返回）
进程上下文-中断上下文-新进程上下文（处理中断）-进程上下文（最先被打断的进程）
中断上下文-新中断上下文
保存旧的上下文，上下文相关寄存器的值保存在内存中。
加载新上下文，从内存中读入，加载入对应的寄存器中。


I/O
1 port I/O 通过I/O端口访问设备寄存器 I/O端口的地址空间，是独立的，不是线性地址空间或物理地址空间的一部分。
cpu通过一个特殊的管脚标识I/O端口访问
2 mmio内存映射io，通过内存访问的形式访问设备寄存器或设备ram
mmio要占用cpu的物理地址空间，把设备寄存器或设备ram映射到物理地址空间上。
整个物理地址空间被映射到线性地址空间，所以要访问I/O资源要做线性到物理地址的转换。

DMA（都使用物理地址访问内存）
直接内存访问。驱动程序事先设定一个内存地址，不用经过cpu直接向内存中复制或读取数据。
同步dma
  软件发起的，驱动将存放的地址通知设备，设备从内存直接读取数据。
异步dma
 设备将数据直接复制到一个事先设定好的内存地址，再中断通知驱动程序。

PCI设备































