        if password1 == password2:
            filteruser = User.objects.filter(username=username)
            if len(filteruser) > 0:
                response=JsonResponse({'success': False, 'msg': '用户名已存在'})
                response['Access-Control-Allow-Origin'] = '*'
                return response
            else:
                User.objects.create_user(
                    username=username, password=password1, type=type,description=description)
                response=JsonResponse({'success': True})
                response['Access-Control-Allow-Origin'] = '*'
                return response
        else:
            response = JsonResponse({'success': False, 'msg': '两次密码不一致'})
            response['Access-Control-Allow-Origin'] = '*'
            return response





# 登录
class LoginView(View):
    def post(self, request, *args, **kwargs):
        username = request.POST.get('username')
        password = request.POST.get('password')
        type = request.POST.get('type')
        user = authenticate(username=username, password=password)
        if user is not None:
            if int(type) == user.type:
                login(request, user)
                return JsonResponse({'success':True})
            else:
                return JsonResponse({'success':False, 'msg': '身份不匹配'})
        else:
            response = JsonResponse({'success': False, 'msg': '用户名或密码错误'})
            # response['Access-Control-Allow-Origin'] = '*'
            return response

# 注册
class RegisterView(View):
    def post(self, request, *args, **kwargs):
        type = request.POST.get('type')
        username = request.POST.get('username')
        password1 = request.POST.get('password1')
        password2 = request.POST.get('password2')
        description = request.POST.get('description')
        if password1 == password2:
            filteruser = User.objects.filter(username=username)
            if len(filteruser) > 0:
                return JsonResponse({'success': False, 'msg': '用户名已存在'})
            else:
                User.objects.create_user(
                    username=username, password=password1, type=type,description=description)
                return JsonResponse({'success': True})
        else:
            response = JsonResponse({'success': False, 'msg': '两次密码不一致'})
            # response['Access-Control-Allow-Origin'] = '*'
            return response





urlpatterns = [
    url(r'^login/', LoginView.as_view(), name='mc_login'),
    url(r'^register/',RegisterView.as_view(),name='mc_register')
]

class CustomerLoginView(View):
    '''
    顾客登录
    '''

    def post(self, request):
        now = datetime.now()
        if not request.POST.get('agreement'):
            return JsonResponse({'response_state': 400, 'msg': '请同意协议之后再登录!'})
        eventid = request.POST.get('id')
        event = Event.get_dict (eventid)
        if not event['is_pub']:
            return JsonResponse ({'response_state': 400, 'msg': '活动还未发布'})
        if 'expire_date' in event:
            if now >= utils.toDate (event['expire_date']):
                return JsonResponse ({'response_state': 400, 'msg': '活动已结束!'})
        if now >= utils.toDate (event['event_end']):
            return JsonResponse ({'response_state': 400, 'msg': '活动已结束!'})
        try:
            customer = Customer.objects.get(
                mobile=request.POST.get('tel'),
                identication=request.POST.get('personId'), event_id=eventid)
        except BaseException:
            return JsonResponse(
                {'response_state': 400, 'msg': '手机号或证件号不正确'})
        try:
            customer.user                                                           #customer没有user的时候
        except BaseException:
            return JsonResponse(
                {'response_state': 400, 'msg': '账号出现异常，请联系售楼人员'})
        session_key = customer.session_key
        if request.session.session_key:                                             #用户如果没有登录是没有session_key的,如果有表示已经登录或没有正常退出,需要先退出.
            logout(request)
        if session_key:                                                             
            Session.objects.filter(pk=session_key).delete()                         #删除之前的session信息,防止session表过大
        login(request, customer.user)
        if not customer.protime:
            customer.protime = now
        customer.session_key = request.session.session_key
        customer.save()
        return JsonResponse({'response_state': 200})
